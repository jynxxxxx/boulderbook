// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        String   @id @default(uuid())
    userId    String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    likes    Like[]
    comments Comment[]

    @@unique([createdAt, id])
    @@index([userId])
}

model Comment {
    id        String   @id @default(uuid())
    userId    String
    postId    String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    likes Like[]
    post  Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([postId])
}

model Like {
    id        String  @id @default(uuid())
    userId    String
    postId    String?
    commentId String?

    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    Comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique(name: "userId_postId", [userId, postId])
    @@unique(name: "userId_commentId", [userId, commentId])
    @@index([userId])
    @@index([postId])
    @@index([commentId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?   @unique
    realName      String?
    password      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    //non next-Auth
    posts     Post[]
    likes     Like[]
    friends   User[]    @relation("friends")
    friendsOf User[]    @relation("friends")
    comments  Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
